import { SignIn, SignOutButton, useUser } from "@clerk/nextjs";
import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { api } from "~/utils/api";
import Image from "next/image";
import { PostView } from "~/components/PostView";
import { useState } from "react";
import { UsersList } from "~/components/UsersList";
import { Menu } from "~/components/Menu";
import { ProfileSubmenu } from "~/components/ProfileSubmenu";

type RelatingUser = {
  id: string;
  fullName: string;
  profileImageUrl: string;
  relationId: string;
};
const FriendRequest = (props: RelatingUser) => {
  const { fullName, profileImageUrl, relationId } = props;
  console.log("id is : ", relationId);

  const ctx = api.useContext();

  const mutation = api.relations.acceptById.useMutation({
    onSuccess: () => {
      void ctx.relations.getAll.invalidate();
    },
    onError: (e) => {
      const errorMessage = e.data?.zodError?.fieldErrors.content;
      if (errorMessage && errorMessage[0]) {
        console.log(errorMessage[0]);
      } else {
        console.log("Failed to update! Please try again later.");
      }
    },
  });

  const handleAccept = () => {
    mutation.mutate({ id: relationId });
  };

  return (
    <div className="flex">
      <div>
        <Image
          className="mx-4 my-2 rounded-full"
          alt={`${fullName}'s profile`}
          src={profileImageUrl}
          height={36}
          width={36}
        />
      </div>
      <div className="flex items-center justify-center text-sm">
        {fullName} wants to be your friend.
        <button onClick={handleAccept}>Accept</button>
      </div>
    </div>
  );
};

const FriendRequestWindow = () => {
  const { user } = useUser();

  const { data, isLoading } = api.relations.getAll.useQuery();
  console.log("relation data: ", data);

  if (!data) return null;

  if (isLoading) return <div>Loading...</div>;

  const friendRequests = data?.map((request) => {
    if (request.relatedUser === user?.id) {
      if (request.type === "pending") {
        return (
          <FriendRequest
            {...request.relatingUser}
            relationId={request.id}
            key={request.id}
          />
        );
      }
    }
  });

  if (!user) return null;

  return (
    <div className="m-3 max-h-52 w-2/5 bg-white p-4 shadow-md">
      <h1>Your friend requests: </h1>
      <br />
      <div>{friendRequests}</div>
    </div>
  );
};

const CreatePostWizard = () => {
  const { user } = useUser();

  const [input, setInput] = useState("");

  const ctx = api.useContext();

  const { mutate, isLoading: isPosting } = api.posts.create.useMutation({
    onSuccess: () => {
      setInput("");
      void ctx.posts.getAll.invalidate();
    },
    onError: (e) => {
      const errorMessage = e.data?.zodError?.fieldErrors.content;
      console.log(errorMessage);
      //add toast
    },
  });

  if (!user) return null;

  return (
    <div className="mb-14 flex w-full items-center justify-center gap-3 rounded bg-white p-4 shadow-md">
      <Image
        src={user.profileImageUrl}
        alt="profile"
        className="h-14 w-14 rounded-full"
        height={56}
        width={56}
      />
      <input
        placeholder="What's on your mind?"
        className="grow bg-transparent outline-none"
        type="text"
        value={input}
        onChange={(e) => setInput(e.target.value)}
        onKeyDown={(e) => {
          if (e.key === "Enter") {
            e.preventDefault();
            if (input !== "") {
              mutate({ content: input });
            }
          }
        }}
        disabled={isPosting}
      />
      {input !== "" && !isPosting && (
        <button onClick={() => mutate({ content: input })}>Post</button>
      )}
    </div>
  );
};

const Feed = () => {
  const { data: postData, isLoading: postsLoading } =
    api.posts.getAll.useQuery();

  console.log("post query data: ", postData);

  if (postsLoading) return <div>Loading...</div>;
  if (!postData) return <div>Something went wrong</div>;

  return (
    <div className="flex w-full flex-col">
      {postData?.map((fullPost) => (
        <PostView {...fullPost} key={fullPost.post.id} />
      ))}
    </div>
  );
};

const Home: NextPage = () => {
  const { isSignedIn, user } = useUser();
  console.log(user);

  const [showFriendRequestWindow, setShowFriendResquestWindow] =
    useState(false);

  const [showProfileSubmenu, setShowProfileSubmenu] = useState(false);

  return (
    <>
      <Head>
        <title>Visagebook</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="grid h-full w-full grid-cols-3">
        <div className="flex">
          <Menu
            currentFriendState={showFriendRequestWindow}
            setFriendState={setShowFriendResquestWindow}
            currentProfileState={showProfileSubmenu}
            setProfileState={setShowProfileSubmenu}
          />
          {showFriendRequestWindow && <FriendRequestWindow />}
          {showProfileSubmenu && <ProfileSubmenu />}
        </div>
        {!isSignedIn && (
          <div className="flex flex-col content-center items-center justify-center">
            <h1 className="m-8 text-2xl">Not authenticated</h1>
            <SignIn />
          </div>
        )}
        <main>
          {isSignedIn && (
            <div className="flex flex-col content-center items-center justify-center">
              <CreatePostWizard />
              <Feed />
              <SignOutButton />
            </div>
          )}
        </main>
        <div className="flex justify-center">
          <UsersList />
        </div>
      </div>
    </>
  );
};

export default Home;
